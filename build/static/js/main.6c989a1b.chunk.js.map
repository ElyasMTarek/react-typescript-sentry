{"version":3,"sources":["logo.svg","ErrorBoundary.tsx","BuggyCounter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","errorInfo","setState","Sentry","scope","keys","forEach","key","setExtra","react_default","a","createElement","style","whiteSpace","toString","componentStack","children","React","Component","BuggyCounter","counter","handleClick","bind","assertThisInitialized","_ref","Error","onClick","App","callError","className","src","logo","height","alt","ErrorBoundary_ErrorBoundary","BuggyCounter_BuggyCounter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","dsn","release","version","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c989a1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\nimport * as Sentry from \"@sentry/browser\";\n\ninterface Props {\n  // your props validation\n}\n\ninterface State {\n  error: any // state types\n  errorInfo: any\n}\n\nexport default class ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    })\n    // You can also log error messages to an error reporting service here\n    this.setState({ error });\n    Sentry.withScope(scope => {\n      Object.keys(errorInfo).forEach(key => {\n        scope.setExtra(key, errorInfo[key]);\n      });\n      Sentry.captureException(error);\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}","import React, { Component } from 'react';\n\ninterface Props {\n  // your props validation\n}\n\ninterface State {\n  counter: number // state types\n}\n\nexport default class BuggyCounter extends Component<Props,State> {\n    constructor(props:any) {\n      super(props);\n      this.state = { counter: 0 };\n      this.handleClick = this.handleClick.bind(this);\n    }\n    \n    handleClick() {\n      this.setState(({counter}) => ({\n        counter: counter + 1\n      }));\n    }\n    render() {\n      if (this.state.counter === 3) {\n        // Simulate a JS error\n        throw new Error(\"This is my custom error!\");\n      }\n      return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;\n    }\n  }\n  ","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ErrorBoundary from './ErrorBoundary';\nimport BuggyCounter from './BuggyCounter';\n\ninterface Props {\n  // your props validation\n}\n\ninterface State {\n  counter: number // state types\n}\n\n\nclass App extends Component<Props, State> {\n\n  callError = () =>{\n    if(this.props==6){\n      return false;\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} style={{ height: '50px' }} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          <ErrorBoundary>\n            <div>\n              <p>\n                <b>\n                  This is an example of error boundaries in React 16.\n                <br /><br />\n                        Click on the numbers to increase the counters.\n                <br />\n                        The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.\n              </b>\n              </p>\n              <hr />\n              <ErrorBoundary>\n                {this.callError()}\n                <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>\n                <BuggyCounter />\n                <BuggyCounter />\n              </ErrorBoundary>\n              <hr />\n              <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>\n              <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n              <ErrorBoundary><BuggyCounter /></ErrorBoundary>\n            </div>\n          </ErrorBoundary>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as Sentry from \"@sentry/browser\";\r\nimport {version} from \"../package.json\"\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nSentry.init({\r\n    dsn: \"https://cd1cddbeff664ad1aed5d1a882c01d25@sentry.io/1370243\",\r\n    release : version\r\n  });\r\n  \r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}